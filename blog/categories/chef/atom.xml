<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef, | Automate All the Things!]]></title>
  <link href="http://dougireton.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://dougireton.github.io/"/>
  <updated>2013-06-23T22:09:06-07:00</updated>
  <id>http://dougireton.github.io/</id>
  <author>
    <name><![CDATA[Doug Ireton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A knife.rb for our time]]></title>
    <link href="http://dougireton.github.io/blog/2013/03/17/a-knife-dot-rb-for-our-time/"/>
    <updated>2013-03-17T20:44:00-07:00</updated>
    <id>http://dougireton.github.io/blog/2013/03/17/a-knife-dot-rb-for-our-time</id>
    <content type="html"><![CDATA[<p>Ohai Chefs!</p>

<p>The basic knife.rb you get from the Chef server works, but it&rsquo;s not suitable to check into version control or share with your team. It has the name of your .pem file hardcoded into it and isn&rsquo;t flexible enough for team use. This week we&rsquo;ll look at a generic, flexible <code>knife.rb</code> you can keep in your <code>chef-repo</code> and share with your team.</p>

<!--more-->


<h2>What you get out of the box</h2>

<p>Here&rsquo;s the knife.rb you&rsquo;ll get if you ask the Chef server to generate one for you:</p>

<p><code>ruby
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "my_username"
client_key               "#{current_dir}/my_username.pem"
validation_client_name   "my_org-validator"
validation_key           "#{current_dir}/my_org-validator.pem"
chef_server_url          "https://chefserver.example.com/organizations/my_org"
cache_type               'BasicFile'
cache_options( :path =&gt; "#{ENV['HOME']}/.chef/checksums" )
cookbook_path            ["#{current_dir}/../cookbooks"]
</code></p>

<h2>A Better Implementation</h2>

<p>Here&rsquo;s what we&rsquo;ve come up with after lots of tinkering. It works on Windows and Mac/Linux. Put this in your <code>chef-repo/.chef/</code> directory and check it into source control.</p>

<p><code>``ruby
current_dir = File.dirname(__FILE__)
user_email  =</code>git config &mdash;get user.email`
home_dir    = ENV[&lsquo;HOME&rsquo;] || ENV[&lsquo;HOMEDRIVE&rsquo;]
org         = ENV[&lsquo;chef_org&rsquo;] || &lsquo;my_org&rsquo;</p>

<p>knife_override = &ldquo;#{home_dir}/.chef/knife_override.rb&rdquo;</p>

<p>chef_server_url          &ldquo;<a href="https://chefserver.example.com/organizations/#">https://chefserver.example.com/organizations/#</a>{org}&rdquo;
log_level                :info
log_location             STDOUT</p>

<h1>USERNAME is UPPERCASE in Windows, but lowercase in the Chef server,</h1>

<h1>so <code>downcase</code> it.</h1>

<p>node_name                ( ENV[&lsquo;USER&rsquo;] || ENV[&lsquo;USERNAME&rsquo;] ).downcase
client_key               &ldquo;#{home_dir}/.chef/#{node_name}.pem&rdquo;
cache_type               &lsquo;BasicFile&rsquo;
cache_options( :path => &ldquo;#{home_dir}/.chef/checksums&rdquo; )</p>

<h1>We keep our cookbooks in separate repos under a ~/chef/cookbooks dir</h1>

<p>cookbook_path            [&ldquo;#{current_dir}/../../../cookbooks&rdquo;]
cookbook_copyright       &ldquo;Your Company, Inc.&rdquo;
cookbook_license         &ldquo;none&rdquo;
cookbook_email           &ldquo;#{user_email}&rdquo;</p>

<p>http_proxy               &ldquo;<a href="http://webproxy.example.com:80">http://webproxy.example.com:80</a>&rdquo;
https_proxy              &ldquo;<a href="http://webproxy.example.com:80">http://webproxy.example.com:80</a>&rdquo;
no_proxy                 &ldquo;localhost, 10.<em>, </em>.example.com, *.dev.example.com&rdquo;</p>

<h1>Allow overriding values in this knife.rb</h1>

<p>Chef::Config.from_file(knife_override) if File.exist?(knife_override)</p>

<p>```</p>

<h2>The Goods</h2>

<p>Most of this should be self-explanitory, but there are a couple of interesting things to note. We are getting the user&rsquo;s email from git config on the fly. We use this to set the <code>cookbook_email</code> attribute so it&rsquo;s automatically populated when you create a new cookbook. On line three, we are getting the Home directory which is <code>HOME</code> on Mac and <code>HOMEDRIVE</code> on Windows. On line four, we are getting the <code>org</code> variable. It will default to <code>my_org</code>, but allows you to override it by setting the <code>chef_org</code> environment variable.</p>

<h2>Knife Override</h2>

<p>On line six, we are setting the path to a <code>knife_override.rb</code> file. We source the file at the end of this <code>knife.rb</code> so you can override any values specified in this <code>knife.rb</code>. So far we&rsquo;ve never used it, but it seemed like a good idea at the time.</p>

<h2>Client keys</h2>

<p>On line 14 we are setting the <code>node_name</code> which is your Chef server username. On Mac/Linux, your username is stored in the <code>USER</code> env variable. On Windows, it&rsquo;s <code>USERNAME</code>. Windows usually stores your username in UPPERCASE. We downcase it here since Chef server usernames are lowercase.</p>

<p>On line 15, we are specifying the location of the user&rsquo;s Chef client key (.pem file). We store it in our home directories since we use the same client key for mulitple orgs.</p>

<h2>Proxies, etc</h2>

<p>The rest of the file is pretty straightforward. We use a proxy server at work, so we specify proxy settings. Finally, we source our <code>knife_override.rb</code> if it exists.</p>

<h2>Wrap Up</h2>

<p>So there you have it. We use this same <code>knife.rb</code> in all our <code>chef-repos</code> and check it into version control. When someone wants to use our repo, they just check it out of Git and they can start using knife immediately. The only other step they have to do is to move their client key (username.pem file) to <code>~/.chef/</code>.</p>

<p>I&rsquo;d be remiss if I didn&rsquo;t point out Joshua Timberman&rsquo;s excellent <a href="https://gist.github.com/jtimberman/1718805">&ldquo;Commented knife.rb for all the things&rdquo;</a>. Lot&rsquo;s of good ideas in there too.</p>

<p>Let me know any cool tricks you&rsquo;re using in your <code>knife.rb</code>. Thanks and see you next week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knife tricks]]></title>
    <link href="http://dougireton.github.io/blog/2013/02/03/knife-tricks/"/>
    <updated>2013-02-03T20:40:00-08:00</updated>
    <id>http://dougireton.github.io/blog/2013/02/03/knife-tricks</id>
    <content type="html"><![CDATA[<p>Ohai Chefs!</p>

<p>At work, we have yet to use search extensively in our Chef Recipes, but we do a fair number of ad hoc knife searches. The following are some knife tricks and tips we&rsquo;ve picked up over the last few months. Most of the credit for these goes to my esteemed co-worker, the Impossibly Hip&trade; <a href="https://twitter.com/jondecamp">Jon DeCamp</a>.</p>

<h3>Find all nodes in an environment</h3>

<p><code>bash
$ knife search node chef_environment:&lt;environment name&gt;
</code></p>

<h3>Find all nodes which contain a role</h3>

<p>```bash
$ knife search node role(s):<role name></p>

<p>$ knife search node &ldquo;role:web_server&rdquo; -a hostname
```
Use &lsquo;roles&rsquo; plural when looking in the expanded run list.</p>

<!--more-->


<h3>Find all nodes which contain a recipe</h3>

<p>```bash</p>

<h1>looks for statsd_handler(::default)</h1>

<p>$ knife search node &ldquo;recipes:statsd_handler&rdquo;</p>

<h1>note the use of \:\: to escape the double-colon</h1>

<p>$ knife search node &ldquo;recipes:windows\:\:reboot_handler&rdquo;
<code>``
Note the use of</code>recipes` plural to search the expanded run list.</p>

<h3>Find all non-64 bit nodes</h3>

<p><code>bash
$ knife search node "(NOT kernel_machine:x86_64)"
</code></p>

<h3>Return selected attributes from knife search</h3>

<p><code>bash
$ knife search node "name:*" -a chef_packages.chef.version
</code>
This returns the <code>chef_packages.chef.version</code> attribute from all nodes in the Chef Org.</p>

<h3>Add a role to all nodes in an Environment</h3>

<p>```bash</p>

<h1>First, run it like this to run without saving the results back to the Chef Server</h1>

<p>$ knife exec -E &lsquo;nodes.transform(&ldquo;chef_environment:dev&rdquo;) {|n| puts n.run_list &lt;&lt; &ldquo;role[hosts_file]&rdquo; }&rsquo;</p>

<p>$ knife exec -E &lsquo;nodes.transform(&ldquo;chef_environment:dev&rdquo;) {|n| puts n.run_list &lt;&lt; &ldquo;role[hosts_file]&rdquo;; n.save }&rsquo;
<code>``
To be on the safe side, run the command above without the</code>n.save<code>so results aren't saved back to the Chef server. When you are sure about the command run it with</code>n.save` to save the results back to the Chef server.</p>

<h3>Add a role to all nodes in an Environment which don&rsquo;t contain the given Role</h3>

<p><code>bash
$ knife exec -E 'nodes.find("chef_environment:dev") {|n| puts n.run_list &lt;&lt; "role[base]" unless n.run_list.include?("role[base]"); n.save }'
</code></p>

<h3>Remove a recipe from all nodes in an Environment</h3>

<p><code>bash
$ knife exec -E 'nodes.transform("chef_environment:dev") {|n| puts n.run_list.remove("recipe[chef-client::upgrade]"); n.save }'
</code></p>

<h3>Remove all nodes from a given role</h3>

<p><code>bash
$ knife exec -E 'nodes.find("role:web_server") {|n| n.run_list.remove("role[web_server]"); n.save}'
</code></p>

<h3>Set a node&rsquo;s run_list back to a single item</h3>

<p><code>bash
$ knife exec -E 'nodes.transform("name:webserver01.example.com") {|n| n.run_list(["role[base]"])}'
</code></p>

<h2>Conclusion</h2>

<p>So that&rsquo;s it for this week. I hope you picked up some valuable knife tricks. The knife search command is versatile and combining <code>knife exec</code> with search allows you to do some amazing things with your infrstructure. Share some of your own knife tricks in the comments or over on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Vim's Goto File command open included Chef recipes]]></title>
    <link href="http://dougireton.github.io/blog/2013/01/27/make-vims-gf-command-open-included-chef-recipes/"/>
    <updated>2013-01-27T21:18:00-08:00</updated>
    <id>http://dougireton.github.io/blog/2013/01/27/make-vims-gf-command-open-included-chef-recipes</id>
    <content type="html"><![CDATA[<p>Ohai Chefs!</p>

<p>Last week, we looked at how to get <a href="http://dougireton.com/blog/2013/01/19/get-chef-clients-by-version/">Chef clients grouped by version</a>. This week, we&rsquo;ll look at something completely different &ndash; customizing Vim to jump to included Chef recipes via the <a href="http://vim.wikia.com/wiki/Open_file_under_cursor#Go_to_file">Goto File command</a> &ndash; <code>gf</code>.</p>

<h2>TL;DR</h2>

<p>Add this to your .vimrc to be able to jump to included recipes (via <code>include_recipe</code>). Caveat: you can only jump to fully-qualified recipe names, e.g. <code>my_cookbook::my_recipe</code>. Hitting <code>gf</code> on <code>include_recipe 'my_cookbook'</code>, won&rsquo;t jump to <code>my_cookbook::default</code>.</p>

<p><code>vim .vimrc autocmd for include_recipe
" Make gf work on Chef include_recipe lines
" Add all cookbooks/*/recipe dirs to Vim's path variable
autocmd BufRead,BufNewFile */cookbooks/*/recipes/*.rb setlocal path+=recipes;/cookbooks/**1
</code></p>

<p>Read on to find out why this works.</p>

<!--more-->


<h2>Including Recipes</h2>

<p>In Chef you can <a href="http://docs.opscode.com/essentials_cookbook_recipes_in_recipes.html">include one recipe in another recipe</a>. For example, in one of our &ldquo;application&rdquo; cookbooks our <code>default.rb</code> recipe contains about 15 <code>include_recipe</code> statements which include recipes from the cookbook as well as recipes from other cookbooks. Often, I want to open one of the included recipes from the <em>default</em> recipe.</p>

<h2>Vim Paths</h2>

<p><code>vim .vimrc autocmd for include_recipe
" Make gf work on Chef include_recipe lines
" Add all cookbooks/*/recipe dirs to Vim's path variable
autocmd BufRead,BufNewFile */cookbooks/*/recipes/*.rb setlocal path+=recipes;/cookbooks/**1
</code></p>

<p>The autocmd above runs when you read in an existing file (BufRead) or create a new file (BufNewFile) in a Chef cookbook <code>recipes</code> directory. The directory path <code>*/cookbooks/*/recipes/*.rb</code> assumes you have a <code>cookbooks</code> directory which contains your cookbooks and inside each cookbook you have a <code>recipes</code> directory.</p>

<p>The <code>setlocal</code> sets the path option locally for the recipe file, not globally in Vim.</p>

<p>The actual <code>path</code> value deserves a bit more explanation. <code>path+=recipes;/cookbooks/**1</code> means append <code>recipes</code> to the current working directory, and also go upwards to the <code>cookbooks</code> directory and search all directories one level down from <code>cookbooks</code> and append <code>recipes</code> to those as well. So in other words it will search for the file under the cursor in the current cookbook&rsquo;s <code>recipe</code> directory, and all other cookbooks' <code>recipe</code> directories as well.</p>

<p>See Vim&rsquo;s help on <a href="http://vimdoc.sourceforge.net/htmldoc/editing.html#file-searching">file searching</a> for more info.</p>

<h2>Conclusion</h2>

<p>So there you have it.</p>

<ol>
<li>Throw that line in your .vimrc file</li>
<li>??</li>
<li><a href="http://www.youtube.com/watch?v=tO5sxLapAts">Profit</a></li>
</ol>


<p>Being able to jump to included Chef recipes is a handy little trick, but there is one caveat. It doesn&rsquo;t work for default recipes, e.g. <code>include_recipe "foo"</code>. The next step for this trick is to use the <code>includeexpr</code> <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'includeexpr'">option</a> to add <code>default.rb</code> to the filename.</p>

<p>Next week, we&rsquo;ll look at various knife search tricks for getting data from your Chef server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Chef Clients by version]]></title>
    <link href="http://dougireton.github.io/blog/2013/01/19/get-chef-clients-by-version/"/>
    <updated>2013-01-19T20:19:00-08:00</updated>
    <id>http://dougireton.github.io/blog/2013/01/19/get-chef-clients-by-version</id>
    <content type="html"><![CDATA[<p>Ohai Chefs!</p>

<p>At work, we&rsquo;re being converted to the gospel of Etsy&rsquo;s <a href="http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/">Church of Graphs</a>. We&rsquo;re sending Chef run times and other metrics to a combination of <a href="https://github.com/etsy/statsd/">StatsD</a>, <a href="http://graphite.wikidot.com/">Graphite</a>, and <a href="http://fdietz.github.com/team_dashboard/">Team Dashboard</a>. Last week, I wanted to add a graph of chef clients by version. In other words, I wanted to see how many Chef 0.10.8, and 10.12 clients we have left to upgrade.</p>

<p>This week, we&rsquo;ll see how to get Chef client versions from the Chef Server, including one way which turned out to be more than <strong>30 times faster</strong> in my tests.</p>

<!--more-->


<h2>The First Attempt</h2>

<p>I needed to get a count of Chef clients grouped by version. I envisioned ending up with a hash like this:</p>

<p>``` ruby
  {</p>

<pre><code>'10.12.0' =&gt; 112,
'10.16.2' =&gt; 534,
'10.18.2' =&gt; 1
</code></pre>

<p>  }
```</p>

<p>My first thought was to do this:</p>

<p><code>bash
$ knife node list | xargs -I {} knife node show {} -a chef_packages.chef.version -Fj
</code></p>

<p>This pipes a list of all nodes in an org to <code>knife node show</code> and returns <code>chef_packages.chef.version</code> in JSON format.</p>

<p>This works, but it takes a <strong>loooong</strong> time, nearly 40 <strong>minutes</strong> on my quad-core Macbook Pro against our Private Chef server to get the Chef client version for 908 nodes, or ~2.4 seconds per node.</p>

<p>``` bash
knife node list</p>

<pre><code>1.82s user 0.36s system 75% cpu 2.878 total
</code></pre>

<p>xargs -I {} knife node show {} -a chef_packages.chef.version</p>

<pre><code>1771.53s user 278.24s system 85% cpu ** 39:46.55 total **
</code></pre>

<p>```</p>

<p>This takes so long because <code>knife node show</code> makes a round-trip to the Chef server for each node. We need to speed this up, preferably by an order of magnitude.</p>

<h2>The Second Attempt</h2>

<p>What if we asked the Chef server to get Chef Client version info for every node in the org and send it to us in one batch?</p>

<p><code>bash
knife search node 'name:*' -a chef_packages.chef.version –Fj
</code></p>

<p>This approach is much more efficient; just over a minute instead of 40 minutes:
```bash
knife search node &lsquo;name:*&rsquo; -a chef_packages.chef.version –Fj</p>

<pre><code>40.72s user 1.54s system 57% cpu ** 1:13.81 total **
</code></pre>

<p>```</p>

<p>The results from the knife search command look like this; easily parsable JSON.</p>

<p>```javascript
{
  &ldquo;results&rdquo;: 3,
  &ldquo;rows&rdquo;: [</p>

<pre><code>{
  "chef_packages.chef.version": "10.16.2",
  "id": "webserver01.example.com"
},
{
  "chef_packages.chef.version": "10.16.2",
  "id": "webserver02.example.com"
},
{
  "chef_packages.chef.version": "10.12.0",
  "id": "db01.example.com"
}
</code></pre>

<p>  ]
}
```</p>

<h2>Ohai Spelunking</h2>

<p>But, hold on a second, how did I know the Chef client version attribute is named <code>chef_packages.chef.version</code>? I didn&rsquo;t, but here&rsquo;s how I found it:</p>

<p><code>bash
knife node show myserver01.example.com -l | grep -C 5 10.16.2
</code></p>

<p>I knew that <code>myserver01.example.com</code> was running Chef Client 10.16.2. I did a <code>knife node show</code> with the <code>-l</code> option to show <strong>all</strong> Ohai attributes and grep&rsquo;d for <code>10.16.2</code> with five lines of context above and below (<code>-C 5</code>).</p>

<p>Here&rsquo;s the result of that whole command:</p>

<p>``` bash
Automatic Attributes (Ohai Data):
chef_packages:  <br/>
  chef:</p>

<pre><code>chef_root:  C:/opscode/chef/embedded/lib/ruby/gems/1.9.1/gems/chef-10.16.2/lib
version:    10.16.2
</code></pre>

<p>  ohai:</p>

<pre><code>ohai_root:  C:/opscode/chef/embedded/lib/ruby/gems/1.9.1/gems/ohai-6.14.0/lib/ohai
version:    6.14.0
</code></pre>

<p>command:           {}
counters:
```</p>

<p>From the output above, I can walk down the <code>chef_packages</code> attribute to determine the attribute I&rsquo;m looking for is <code>chef_packages.chef.version</code>.</p>

<h2>Parsing the Results</h2>

<p>So, now that we have the raw JSON data, how can we turn it into this?</p>

<p>``` ruby
  {</p>

<pre><code>'10.12.0' =&gt; 112,
'10.16.2' =&gt; 534,
'10.18.2' =&gt; 1
</code></pre>

<p>  }
```</p>

<p>Let&rsquo;s take a look at a script to parse the JSON list of nodes into a nice &ldquo;grouped-by&rdquo; version hash:</p>

<p>```ruby
require &lsquo;json&rsquo;</p>

<p>KNIFE_RB = &lsquo;.chef/knife.rb&rsquo;
NODE_LIST = <code>knife search node -c #{ KNIFE_RB } 'name:*' -a chef_packages.chef.version --format json 2&gt;&amp;1</code></p>

<p>def get_chef_clients_by_version(nodes)</p>

<p>  # turn JSON into Ruby objects
  nodes_json = JSON.parse nodes</p>

<p>  # create an array of all chef client versions
  client_versions = nodes_json[&lsquo;rows&rsquo;].map { |item| item[&lsquo;chef_packages.chef.version&rsquo;] }</p>

<p>  # initialize an empty hash to store our final counts grouped by version
  number_of_clients_by_version = Hash.new(0)</p>

<p>  # For each item in the client_versions array, create a unique key in our
  # number_of_clients_by_version hash and increment our counter
  client_versions.each { |version| number_of_clients_by_version[version] += 1 }</p>

<p>  number_of_clients_by_version
end</p>

<p>puts get_chef_clients_by_version(NODE_LIST)
```</p>

<p>Let&rsquo;s take it line by line. On line one we&rsquo;re requiring <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/json/rdoc/JSON.html">JSON</a>. On line four we&rsquo;re executing the <code>knife search</code> command. Lines 6 &ndash; 21 are a function to parse the node data into our final count of versions.</p>

<h2>The <code>get_chef_clients_by_version</code> method</h2>

<p>This method is where all the exciting stuff happens. On line 9, we&rsquo;re parsing the JSON data and creating a Ruby data structure which looks like this:</p>

<p><code>ruby
{"results"=&gt;3,
 "rows"=&gt;
  [{"chef_packages.chef.version"=&gt;"10.16.2", "id"=&gt;"webserver01.example.com"},
   {"chef_packages.chef.version"=&gt;"10.16.2", "id"=&gt;"webserver02.example.com"},
   {"chef_packages.chef.version"=&gt;"10.16.2", "id"=&gt;"db01.example.com"},
  ]
}
</code></p>

<p>Line 12 is my favorite line of the method.</p>

<p><code>ruby
  # create an array of all chef client versions
  client_versions = nodes_json['rows'].map { |item| item['chef_packages.chef.version'] }
</code></p>

<p>It uses Ruby&rsquo;s super useful <a href="http://www.ruby-doc.org/core-1.9.3/Enumerable.html#method-i-map"><code>map</code></a> method to create an simple array of versions from the <code>rows</code> array of two-element hashes. The result of the <code>map</code> looks like this:</p>

<p><code>ruby
["10.16.2", "10.16.2", "10.12.0"]
</code></p>

<p>From there we create and return the <code>number_of_clients_by_version</code> hash to hold our results and iterate over each item in the <code>client_versions</code> array, counting the nodes by version.</p>

<p>```ruby</p>

<h1>initialize an empty hash to store our final counts grouped by version</h1>

<p>  number_of_clients_by_version = Hash.new(0)</p>

<p>  # For each item in the client_versions array, create a unique key in our
  # number_of_clients_by_version hash and increment our counter
  client_versions.each { |version| number_of_clients_by_version[version] += 1 }
```</p>

<p>Thanks to my Talented and Gifted&trade; co-worker <a href="https://twitter.com/moserke">Kevin</a> for <a href="http://stackoverflow.com/questions/569694/count-duplicate-elements-in-ruby-array">this StackOverflow link</a> which explained how to do the group-by version.</p>

<p>So here&rsquo;s the result of the script, which is exactly what we set out to accomplish:</p>

<p>```ruby
  {</p>

<pre><code>'10.12.0' =&gt; 112,
'10.16.2' =&gt; 534,
'10.18.2' =&gt; 1
</code></pre>

<p>  }
```</p>

<h2><a href="http://www.youtube.com/watch?v=WEQnzs8wl6E">Fade to Black</a></h2>

<p>So there you have it. We compared two approaches to returning data from the Chef server, with one being an order of magnitude faster. We figured out how to find specific Ohai attribute names, and we created a script to transform the raw data to something truly useful.</p>

<p>These posts seem to keep getting longer, so maybe next week, we&rsquo;ll have something short and sweet. Thanks for reading and I&rsquo;d love to hear your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an LWRP - part 3]]></title>
    <link href="http://dougireton.github.io/blog/2013/01/13/creating-an-lwrp-part-3/"/>
    <updated>2013-01-13T11:38:00-08:00</updated>
    <id>http://dougireton.github.io/blog/2013/01/13/creating-an-lwrp-part-3</id>
    <content type="html"><![CDATA[<p>Ohai Chefs!</p>

<p>Last week, we started looking at how to create the Provider part of the LWRP, the code which creates, deletes, or changes the Resource on the managed node. We looked at implementing Action methods (<code>:create</code>, <code>:delete</code>), using the <code>load_current_resource</code> method to read in attributes of existing resources, and how to support Chef&rsquo;s <code>why-run</code> mode.</p>

<p>This week, we&rsquo;ll complete the Provider by looking at the <code>port_exists?</code>, <code>create_printer_port</code>, and <code>delete_printer_port</code> methods. The <code>load_current_resource</code> method uses the <code>port_exists?</code> method to determine if the printer port already exists. The latter two methods leverage Windows PowerShell to create and delete printer ports respectively. Collectively, these are the private methods in this class, meant to be called only by the <code>:create</code> and <code>:delete</code> Action methods and <code>load_current_resource</code>.</p>

<!--more-->


<h2><a href="http://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a> (<a href="http://en.wikipedia.org/wiki/Whoomp!_(There_It_Is)">there it is</a>)&hellip;</h2>

<p>We&rsquo;ve moved some of the code which might otherwise go into our <code>:create</code> and <code>:delete</code> Action methods into separate methods which create and delete printer ports using PowerShell. Breaking up our methods into smaller, logical chunks follows the Composed Method technique which I first learned about in <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104">Eloquent Ruby</a> by Russ Olsen.</p>

<p><blockquote><p>&ldquo;The composed method technique advocates dividing your class up into methods that have three characteristics. First, each method should do a single thing—focus on solving a single aspect of the problem. By concentrating on one thing, your methods are not only easier to write, they are also easier to understand.</p></p><p><p>Second, each method needs to operate at a single conceptual level: Simply put, don’t mix high-level logic with the nitty-gritty details. A method that implements the business logic around, say, currency conversions, should not suddenly veer off into the details of how the various accounts are stored in a database.</p></p><p><p>Finally, each method needs to have a name that reflects its purpose."</p></p><p><p></p></blockquote></p>

<p>Olsen, Russ (2011-02-07). <em>Eloquent Ruby</em> (Addison-Wesley Professional Ruby Series) (Kindle Locations 2102-2107). Pearson Education (USA). Kindle Edition.</p>

<h2>The <code>:create</code> action</h2>

<p>Let&rsquo;s look at the <code>:create</code> Action to see how we applied the Composed Method technique.</p>

<p>``` ruby
action :create do
  if @current_resource.exists</p>

<pre><code>Chef::Log.info "#{ @new_resource } already exists - nothing to do."
</code></pre>

<p>  else</p>

<pre><code>converge_by("Create #{ @new_resource }") do
  create_printer_port
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Even without comments it should be pretty clear what this method does; it almost reads like plain English. If the printer port already exists, it logs a message and does nothing, otherwise it creates a printer port. We have made it so readable by extracting out the code which checks for a pre-existing printer port into the <code>load_current_resource</code> method, and the code which creates the printer port into the <code>create_printer_port</code> method.</p>

<p>By composing our <code>:create</code> method this way, it&rsquo;s become a template. You should be able to use the code above for almost any <code>:create</code> Action in any LWRP you will write, just by changing the name of the <code>create_printer_port</code> method to something more suitable.</p>

<p>Now, let&rsquo;s look at the private <code>create_printer_port</code> method, which actually creates the printer port.</p>

<h2><code>create_printer_port</code> method</h2>

<p>``` ruby
def create_printer_port</p>

<p>  port_name = new_resource.port_name || &ldquo;IP_#{ new_resource.ipv4_address }&rdquo;</p>

<p>  # create the printer port using PowerShell
  powershell &ldquo;Creating printer port #{ new_resource.port_name }&rdquo; do</p>

<pre><code>code &lt;&lt;-EOH

  Set-WmiInstance -class Win32_TCPIPPrinterPort `
    -EnableAllPrivileges `
    -Argument @{ HostAddress = "#{ new_resource.ipv4_address }";
                 Name        = "#{ port_name }";
                 Description = "#{ new_resource.port_description }";
                 PortNumber  = "#{ new_resource.port_number }";
                 Protocol    = "#{ new_resource.port_protocol }";
                 SNMPEnabled = "$#{ new_resource.snmp_enabled }";
              }
EOH
</code></pre>

<p>  end
end
```</p>

<p>The <code>create_printer_port</code> method starts off by setting a local variable, <code>port_name</code> which is set to the <code>new_resource.port_name</code> if the user set the <code>port_name</code> attribute, or <code>IP_&lt;ipv4_address&gt;</code> if the user didn&rsquo;t set <code>port_name</code>.</p>

<p>After that, it&rsquo;s just a straightforward PowerShell resource block which creates the printer port using the attributes passed in from the <code>windows_printer_port</code> resource in the Recipe.</p>

<p>One thing to note is how we are using <a href="http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Interpolation">Ruby String Interpolation</a> to pass our Resource Attributes in to the PowerShell script.The <code>"#{ new_resource.foo }"</code> sections are how we can pass Ruby variables into a PowerShell or batch script. Pretty handy.</p>

<h2><code>port_exists?</code> method</h2>

<p><code>port_exists?</code> is a simple method which queries the Windows Registry to see if the printer port has already been created. The <code>load_current_resource</code> method calls <code>port_exists?</code>, and if the printer port exists, it sets <code>@current_resource.exists</code> to <code>true</code>.</p>

<p>One thing you should notice is that the question mark is part of the <code>port_exists?</code> method name. In Ruby, it is perfectly acceptable, and expected that methods which return <em>true</em> or <em>false</em> have a <code>?</code> appended to the method name.</p>

<p>``` ruby
PORTS_REG_KEY = &lsquo;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print\Monitors\Standard TCP/IP Port\Ports\&rsquo;</p>

<p>def port_exists?(name)
  port_reg_key = PORTS_REG_KEY + name</p>

<p>  Chef::Log.debug &ldquo;Checking to see if this reg key exists: &lsquo;#{ port_reg_key }&rsquo;&rdquo;
  Registry.key_exists?(port_reg_key)
end
```</p>

<p>This code block creates a Ruby <a href="http://rubylearning.com/satishtalim/ruby_constants.html">Constant</a>, the <code>PORTS_REG_KEY</code>, which is the key we&rsquo;ll query to determine if the printer port already exists.</p>

<p>In our <code>port_exists?</code> method, we call the Windows Cookbook <a href="https://github.com/opscode-cookbooks/windows#library-methods"><code>Registry.key_exists?</code></a> method which returns <code>true</code> or <code>false</code>, telling us whether the printer port is already in the Windows Registry or not. Notice that <code>?</code> in the method name again?</p>

<h2><code>delete_printer_port</code> method</h2>

<p>The <code>delete_printer_port</code> is much the same as the <code>create_printer_port</code> method so I won&rsquo;t cover it here.</p>

<h2>Wrap-up</h2>

<p>So now we&rsquo;ve completed our look at how to create LWRPs. We&rsquo;ve covered both the Reource and Provider and looked at structuring your Ruby methods using the Composed Methods pattern. Certainly, my printer port LWRP isn&rsquo;t perfect. In writing these blog posts, I&rsquo;ve already come up with some changes to make it better, but the biggest glaring omission is the complete lack of test coverage!</p>

<h2>Next Steps</h2>

<p>We&rsquo;ll probably take a break from LWRPs next week but look for a blog post in the near future on testing LWRPs using my absolute favorite Ruby testing libarary, <a href="http://rspec.info/">RSpec</a>. Huge shout out to <a href="https://twitter.com/jtimberman">Joshua Timberman</a> to whom I&rsquo;m indebted for great example <a href="https://github.com/opscode-cookbooks/runit/commits/CHEF-154">RSpec tests in the Runit</a> cookbook.</p>
]]></content>
  </entry>
  
</feed>
